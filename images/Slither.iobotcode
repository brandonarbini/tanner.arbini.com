BotSnake = function(game, spriteKey, x, y) {
    Snake.call(this, game, spriteKey, x, y);
    this.trend = 1;
}

BotSnake.prototype = Object.create(Snake.prototype);
BotSnake.prototype.constructor = BotSnake;
BotSnake.prototype.tempUpdate = BotSnake.prototype.update;
BotSnake.prototype.update = function() {
    this.head.body.setZeroRotation();

    //ensure that the bot keeps rotating in one direction for a
    //substantial amount of time before switching directions
    if (Util.randomInt(1,20) == 1) {
        this.trend *= -1;
    }
    this.head.body.rotateRight(this.trend * this.rotationSpeed);
    this.tempUpdate();
}
PlayerSnake.prototype.tempUpdate = PlayerSnake.prototype.update;
PlayerSnake.prototype.update = function() {
    //find the angle that the head needs to rotate
    //through in order to face the mouse
    var mousePosX = this.game.input.activePointer.worldX;
    var mousePosY = this.game.input.activePointer.worldY;
    var headX = this.head.body.x;
    var headY = this.head.body.y;
    var angle = (180*Math.atan2(mousePosX-headX,mousePosY-headY)/Math.PI);
    if (angle > 0) {
        angle = 180-angle;
    }
    else {
        angle = -180-angle;
    }
    var dif = this.head.body.angle - angle;
    this.head.body.setZeroRotation();
    //allow arrow keys to be used
    if (this.cursors.left.isDown) {
        this.head.body.rotateLeft(this.rotationSpeed);
    }
    else if (this.cursors.right.isDown) {
        this.head.body.rotateRight(this.rotationSpeed);
    }
    //decide whether rotating left or right will angle the head towards
    //the mouse faster, if arrow keys are not used
    else if (dif < 0 && dif > -180 || dif > 180) {
        this.head.body.rotateRight(this.rotationSpeed);
    }
    else if (dif > 0 && dif < 180 || dif < -180) {
        this.head.body.rotateLeft(this.rotationSpeed);
    }

    //call the original snake update method
    this.tempUpdate();
}//create player
var snake = new PlayerSnake(this.game, 'circle', 0, 0);
this.game.camera.follow(snake.head);

//create bots
new BotSnake(this.game, 'circle', -200, 0);
new BotSnake(this.game, 'circle', 200, 0);
this.game.physics.p2.removeConstraint(this.edgeLock);
this.edge.destroy();
initCircle: function(circle) {
    circle.scale.setTo(this.scale);
    this.game.physics.p2.enable(circle, this.debug);
    circle.body.clearShapes();
    //give the circle a circular physics body
    circle.body.addCircle(circle.width*0.5);
    circle.body.setCollisionGroup(this.collisionGroup);
    circle.body.collides([]);
    this.eyeGroup.add(circle);
    return circle;
}
updateConstraints: function(offset) {
    //change where the lock constraint of the white circle
    //is if it already exists
    if (this.lock) {
        this.lock.localOffsetB = [
            this.game.physics.p2.pxmi(offset[0]),
            this.game.physics.p2.pxmi(Math.abs(offset[1]))
        ];
    }
    //create a lock constraint if it doesn't already exist
    else {
        this.lock = this.game.physics.p2.createLockConstraint(
            this.whiteCircle.body, this.head.body, offset, 0
        );
    }

    //change the distance of the distance constraint for
    //the black circle if it exists already
    if (this.dist) {
        this.dist.distance = this.game.physics.p2.pxm(this.whiteCircle.width*0.25);
    }
    //create a distance constraint if it doesn't exist already
    else {
        this.dist = this.game.physics.p2.createDistanceConstraint(
            this.blackCircle.body, this.whiteCircle.body, this.whiteCircle.width*0.25
        );
    }
}
setScale: function(scale) {
    this.scale = scale;
    for (var i = 0 ; i < this.eyeGroup.children.length ; i++) {
        var circle = this.eyeGroup.children[i];
        circle.scale.setTo(this.scale);
        //change the radii of the circle bodies using pure p2 physics
        circle.body.data.shapes[0].radius = this.game.physics.p2.pxm(circle.width*0.5);
    }

}
update: function() {
    var mousePosX = this.game.input.activePointer.worldX;
    var mousePosY = this.game.input.activePointer.worldY;
    var headX = this.head.body.x;
    var headY = this.head.body.y;
    var angle = Math.atan2(mousePosY-headY, mousePosX-headX);
    var force = 300;
    //move the black circle of the eye towards the mouse
    this.blackCircle.body.moveRight(force*Math.cos(angle));
    this.blackCircle.body.moveDown(force*Math.sin(angle));
}
destroy: function() {
    this.whiteCircle.destroy();
    this.blackCircle.destroy();
    this.game.physics.p2.removeConstraint(this.lock);
    this.game.physics.p2.removeConstraint(this.dist);
}
EyePair = function(game, head, scale) {
    this.game = game;
    this.head = head;
    this.scale = scale;
    this.eyes = [];

    this.debug = false;

    //create two eyes
    var offset = this.getOffset();
    this.leftEye = new Eye(this.game, this.head, this.scale);
    this.leftEye.updateConstraints([-offset.x, -offset.y]);
    this.eyes.push(this.leftEye);

    this.rightEye = new Eye(this.game, this.head, this.scale);
    this.rightEye.updateConstraints([offset.x, -offset.y]);
    this.eyes.push(this.rightEye);
}
getOffset: function() {
    var xDim = this.head.width*0.25;
    var yDim = this.head.width*.125;
    return {x: xDim, y: yDim};
}
this.eyes = new EyePair(this
# HACK: 
